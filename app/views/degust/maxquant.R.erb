library(limma)
library(edgeR)
library(jsonlite)

#From _common
count_cols <- <%== @columns %>
data<-read.delim('<%== @counts_file %>',skip=<%= @counts_skip %>, sep="<%== @sep_char %>", check.names=FALSE, colClasses='character', na.strings=c())

rzr_col <- data$`Peptide counts (razor+unique)`
rzr_uniq <- lapply(lapply(mapply(rzr_col, FUN = strsplit, ";"), FUN = as.numeric), FUN = sum)

data <- data[data$Reverse != "+" & data$`Only identified by site` != "+" & rzr_uniq > 1,]
data[,count_cols] <- apply(data[,count_cols], 2, function(v) as.numeric(v)) # Force numeric count columns

counts <- as.matrix(data[, count_cols])
#Remove rows with >= 20% missing values (Missing mean NA, not 0)
data <- data[rowMeans(counts == 0) <= 0.2,]
counts <- counts[rowMeans(counts == 0) <= 0.2,]
#Variance Stabilise

#Impute here.
lowpt <- median(as.matrix(counts)) - (sd(as.matrix(counts)) * 1.5)
highpt <- median(as.matrix(counts)) - (sd(as.matrix(counts)) * 2.1)
mid_vals <- counts[counts < highpt & lowpt < counts]
#Select values at random which are <= 1.8 SD from the median and fill them into NA's?
counts[is.na(counts)] <- mid_vals[floor(runif(n=sum(is.na(counts)), min = 0, max = length(mid_vals)))]
#Select values at random from normal distribution which take values from 1.5-2.1SD from median.
#How do we produce a normal distribution that can select from it?

#Assay call

#Pre-process here
#data <- x %>%
#	filter(Reverse!="+", Only.identified.by.site!="+", Razor...unique.peptides>=2).
#data_filter<-filter_missval(data_se,thr = 2)

#Filters low intensity/counts (not missing values) Probably redundant as missing values are 0's
keepMin <- apply(counts, 1, max) >= <%= @min_counts %>
data <- data[keepMin,]
y <- log2(counts[keepMin,]+0.5)

design <- <%== @design %>
cont.matrix <- <%== @cont_matrix %>

fit <- lmFit(y,design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)

out <- topTable(fit2, n=Inf, sort.by='none')

out2 <- cbind(fit2$coef,
			  out[, c('P.Value','adj.P.Val','AveExpr')],
			  data[, c(<%== @export_cols %>)] )

write.csv(out2, file="<%== @output_dir %>/output.txt", row.names=FALSE,na='')

cat(
   toJSON(list(rank=fit2$rank, df_prior=fit2$df.prior,
			   design=data.frame(fit2$design), contrasts=data.frame(fit2$contrasts),
			   cov_coefficients=data.frame(fit2$cov.coefficients))),
   file="<%== @output_dir %>/extra.json"
)
